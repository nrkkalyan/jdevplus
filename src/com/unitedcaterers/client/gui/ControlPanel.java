package com.unitedcaterers.client.gui;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;

import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;

/**
 * This panel contains the MenuBar and a SearchPanel. In future it may contain a
 * ToolBar as well. The events generated by clicking the menus are caught by
 * this panel and then appropriate User action events are sent to the
 * controller.
 */
public class ControlPanel extends BasePanel implements ActionListener {
	JMenuBar	mb;
	JTextField	hotelnameTF	= new JTextField(10);
	JTextField	locationTF	= new JTextField(10);
	JButton		searchBT	= new JButton("Search");
	JButton		bookBT		= new JButton("Reserve");
	
	/**
	 * ClientControlPanel constructor. You may also include connect and
	 * disconnect option which will allow you to shift to remote or local
	 * database on the fly dynamically.
	 */
	public ControlPanel() {
		super();
		
		this.setLayout(new BorderLayout());
		mb = new JMenuBar();
		searchBT.setToolTipText("Search caterers based on required name or location. No parameter Shows All caterers.");
		searchBT.setActionCommand("SEARCH_CATERERS_WITH_PARAMS");
		
		bookBT.setToolTipText("Book the caterer selected from the list of caterers below");
		bookBT.setActionCommand("BOOK_CATERER");
		
		searchBT.addActionListener(this);
		bookBT.addActionListener(this);
		
		JMenuItem exit = new JMenuItem("Exit");
		exit.setToolTipText("Exit and close the United Caterers Booking Client.");
		exit.setActionCommand("EXIT");
		exit.addActionListener(this);
		
		JMenu mMenu = new JMenu("File");
		mMenu.add(exit);
		
		mb.add(mMenu);
		this.add(BorderLayout.NORTH, mb);
		
		this.add(BorderLayout.SOUTH, addSearchAndBookPanel());
	}
	
	private JPanel addSearchAndBookPanel() {
		JPanel searchAndBookPanel = new JPanel(new BorderLayout());
		
		JPanel searchPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
		JPanel textFieldPanel = new JPanel(new BorderLayout());
		JPanel namePanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		namePanel.add(new JLabel("Hotel Name"));
		hotelnameTF.setToolTipText("Enter Hotel Name");
		namePanel.add(hotelnameTF);
		
		JPanel locationPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
		locationPanel.add(new JLabel("Location"));
		locationTF.setToolTipText("Enter Location");
		locationPanel.add(locationTF);
		textFieldPanel.add(namePanel, BorderLayout.NORTH);
		textFieldPanel.add(locationPanel, BorderLayout.SOUTH);
		searchPanel.add(textFieldPanel);
		
		searchPanel.add(searchBT);
		searchPanel.add(bookBT);
		// Add a border to the search panel
		Border blackBorder = BorderFactory.createLineBorder(Color.black);
		TitledBorder searchBorder = BorderFactory.createTitledBorder(blackBorder, "Search & Book");
		searchBorder.setTitleJustification(TitledBorder.CENTER);
		searchPanel.setBorder(searchBorder);
		
		searchAndBookPanel.add(searchPanel, BorderLayout.SOUTH);
		
		return searchAndBookPanel;
	}
	
	@Override
	public void actionPerformed(ActionEvent ae) {
		// System.out.println("Action in CCP :"+ae.getActionCommand());
		if (ae.getSource() == searchBT) {
			String hotelname = hotelnameTF.getText();
			String location = locationTF.getText();
			ae = new ActionEvent(searchBT, ae.getID(), "SEARCH_CATERERS_WITH_PARAMS:" + hotelname + "," + location);
		}
		postUserActionEvent(ae);
	}
	
	/**
	 * This main method is just to test the layout and menus of this panel by
	 * running it standalone.
	 * 
	 * @param args
	 *            None
	 */
	public static void main(String[] args) {
		ControlPanel ccp = new ControlPanel();
		JFrame fr = new JFrame();
		fr.setSize(500, 300);
		fr.getContentPane().add(BorderLayout.NORTH, ccp);
		fr.setVisible(true);
	}
	
	/**
	 * In complex applications the Menu is usually dynamic. Depending on what
	 * the user is doing, some menus/menuitems are enabled and some are
	 * disabled. update() method is useful in such cases.
	 */
	@Override
	public void update(Observable model, Object obj) {
		// does nothing.
	}
}
