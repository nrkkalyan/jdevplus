package com.unitedcaterers.client.gui;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Observable;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTextField;




/**
 * This panel contains the MenuBar and a SearchPanel. In future it may contain a ToolBar as well.
 * The events generated by clicking the menus are caught by this panel and then appropriate User action events are sent to the controller.
 */
public class ControlPanel extends BasePanel implements ActionListener {
    JMenuBar mb;
    JTextField numberTF = new JNumericTextField(5), locationTF = new JTextField(20);
    JButton searchBT = new JButton("Search/Show All"), bookBT = new JButton("Book Caterer");
    /**
     * ClientControlPanel constructor. You may also include connect and disconnect option which will allow you to shift to remote or local database on the fly dynamically.
     */
    public ControlPanel() {
        super();
        
        this.setLayout(new BorderLayout());
        mb = new JMenuBar();
        searchBT.setToolTipText("Search caterers based on required capacity and location. No parameter Shows All caterers.");
        searchBT.setActionCommand("SEARCH_CATERERS_WITH_PARAMS");
        
        bookBT.setToolTipText("Book the caterer selected from the list of caterers below");
        bookBT.setActionCommand("BOOK_CATERER");
        
        searchBT.addActionListener(this); bookBT.addActionListener(this);
        
        JMenuItem connectLocal = new JMenuItem("Connect To Local Server");
        connectLocal.setToolTipText("Connect to the local database.");
        connectLocal.setActionCommand("CONNECT_LOCAL");
        connectLocal.addActionListener(this);
        
        
        JMenuItem connectRemote = new JMenuItem("Connect To Remote Server");
        connectRemote.setToolTipText("Connect to the remote server.");
        connectRemote.setActionCommand("CONNECT_REMOTE");
        connectRemote.addActionListener(this);
        
        JMenuItem disconnect = new JMenuItem("Disconnect");
        disconnect.setToolTipText("Disconnect from the current server.");
        disconnect.setActionCommand("DISCONNECT");
        disconnect.addActionListener(this);
        
        
        JMenuItem view = new JMenuItem("Search Caterers");
        view.setToolTipText("Search Cateters");
        view.setActionCommand("SEARCH_CATERERS");
        view.addActionListener(this);
        
        
        
        JMenuItem viewall = new JMenuItem("Show All Caterers");
        viewall.setToolTipText("Display all Caterers");
        viewall.setActionCommand("VIEWALL_CATERERS");
        viewall.addActionListener(this);
        
        
        JMenuItem clear = new JMenuItem("Clear");
        clear.setToolTipText("Clear the carerers display.");
        clear.setActionCommand("CLEAR_CATERERS");
        clear.addActionListener(this);
        
        JMenuItem exit = new JMenuItem("Exit");
        exit.setToolTipText("Exit and close the United Caterers Booking Client.");
        exit.setActionCommand("EXIT");
        exit.addActionListener(this);
        
        JMenu mMenu = new JMenu("File");
        mMenu.add(view);
        mMenu.add(viewall);
        mMenu.add(clear);
        mMenu.addSeparator();
        mMenu.add(exit);
        
        JMenu oMenu = new JMenu("Tools");
        oMenu.add(connectLocal);
        oMenu.add(connectRemote);
        oMenu.add(disconnect);
        
        JMenuItem help = new JMenuItem("Help");
        help.setToolTipText("Help on Application Usage");
        help.setActionCommand("APP_HELP");
        help.addActionListener(this);
        
        JMenuItem about = new JMenuItem("About");
        about.setToolTipText("About");
        about.setActionCommand("ABOUT");
        about.addActionListener(this);
        
        JMenu hMenu = new JMenu("Help");
        hMenu.add(help);
        hMenu.add(about);
        
        mb.add(mMenu);
        mb.add(oMenu);
        mb.add(hMenu);
        this.add(BorderLayout.NORTH, mb);
        
        JPanel tempPanel = new JPanel();
        tempPanel.setLayout(new FlowLayout()); //new BoxLayout(tempPanel, BoxLayout.X_AXIS));
        tempPanel.add(new JLabel("Number of Guests : "));
        tempPanel.add(numberTF);
        tempPanel.add(new JLabel("Location : "));
        tempPanel.add(locationTF);
        tempPanel.add(searchBT);
        tempPanel.add(bookBT);
        
        this.add(BorderLayout.SOUTH, tempPanel);
    }
    public void actionPerformed(ActionEvent ae) {
        //System.out.println("Action in CCP :"+ae.getActionCommand());
        if(ae.getSource() == searchBT) {
            String capacity = numberTF.getText();
            String location = locationTF.getText();
            ae = new ActionEvent(searchBT, ae.getID(), "SEARCH_CATERERS_WITH_PARAMS:"+capacity+","+location);
        }
        postUserActionEvent(ae);
    }
    
    /**
     * This main method is just to test the layout and menus of this panel by running it standalone.
     * @param args None
     */
    public static void main(String[] args) {
        ControlPanel ccp = new ControlPanel();
        JFrame fr = new JFrame();
        fr.setSize(500, 300);
        fr.getContentPane().add(BorderLayout.NORTH, ccp);
        fr.setVisible(true);
    }
    
    
    /**
     * In complex applications the Menu is usually dynamic. Depending on what the user is doing, some menus/menuitems are enabled and some are disabled.
     * update() method is useful in such cases.
     */
    public void update(Observable model, Object obj) {
        //does nothing.
    }
}
